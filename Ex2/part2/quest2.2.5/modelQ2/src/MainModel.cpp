/**
 * Source file for the MainModel model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "MainModel.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { 

MainModel::MainModel() :
    Recursion<CSPConstruct>()
{
  SETNAME(this, "MainModel");

  // Initialize channels
  myLoopConcontrol_out_to_displaycontrolChannel = new BufferedChannel<double, One2In, Out2One>(20, true, false);
  myLoopConoutput_to_PlantuChannel = new UnbufferedChannel<double, One2In, Out2One>();
  myPlanttime_to_display_to_displaytime_displayChannel = new BufferedChannel<double, One2In, Out2One>(20, true, false);
  myPlanty_out_to_displayy_outChannel = new BufferedChannel<double, One2In, Out2One>(20, true, false);
  myPlanty_to_LoopConMVChannel = new UnbufferedChannel<double, One2In, Out2One>();
  mySeqConoutput_to_LoopConSPChannel = new UnbufferedChannel<double, One2In, Out2One>();
  mySeqConpulse_out_to_displaypulseChannel = new BufferedChannel<double, One2In, Out2One>(20, true, false);

  // Initialize model objects
  myLoopCon = new Controller::Controller(myPlanty_to_LoopConMVChannel, mySeqConoutput_to_LoopConSPChannel, myLoopConcontrol_out_to_displaycontrolChannel, myLoopConoutput_to_PlantuChannel);
  SETNAME(myLoopCon, "LoopCon");
  myPlant = new LinearSystem::LinearSystem(myPlanttime_to_display_to_displaytime_displayChannel, myLoopConoutput_to_PlantuChannel, myPlanty_to_LoopConMVChannel, myPlanty_out_to_displayy_outChannel);
  SETNAME(myPlant, "Plant");
  mySeqCon = new Step::Step(mySeqConoutput_to_LoopConSPChannel, mySeqConpulse_out_to_displaypulseChannel);
  SETNAME(mySeqCon, "SeqCon");
  mydisplay = new display::display(myLoopConcontrol_out_to_displaycontrolChannel, mySeqConpulse_out_to_displaypulseChannel, myPlanttime_to_display_to_displaytime_displayChannel, myPlanty_out_to_displayy_outChannel);
  SETNAME(mydisplay, "display");

  // Create PARALLEL group
  myPARALLEL = new Parallel(
    (CSPConstruct *) myLoopCon,
    (CSPConstruct *) myPlant,
    (CSPConstruct *) mySeqCon,
    NULL
  );
  SETNAME(myPARALLEL, "PARALLEL");

  // Create PRI_PARALLEL group
  myPRI_PARALLEL = new PriParallel(
    (CSPConstruct *) mydisplay,
    (CSPConstruct *) myPARALLEL,
    NULL
  );
  SETNAME(myPRI_PARALLEL, "PRI_PARALLEL");

  // Register PRI_PARALLEL as top-level recursive object
  setToActivate(myPRI_PARALLEL);
  setEvaluateCondition(true);


  // protected region constructor on begin
  // protected region constructor end
}

MainModel::~MainModel()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin
  // protected region destructor end

  // Destroy model groups
  delete myPARALLEL;
  delete myPRI_PARALLEL;

  // Destroy model objects
  delete mydisplay;
  delete mySeqCon;
  delete myPlant;
  delete myLoopCon;

  // Destroy channels
  delete myLoopConcontrol_out_to_displaycontrolChannel;
  delete myLoopConoutput_to_PlantuChannel;
  delete myPlanttime_to_display_to_displaytime_displayChannel;
  delete myPlanty_out_to_displayy_outChannel;
  delete myPlanty_to_LoopConMVChannel;
  delete mySeqConoutput_to_LoopConSPChannel;
  delete mySeqConpulse_out_to_displaypulseChannel;
}



// protected region additional functions on begin
// protected region additional functions end

// Close namespace(s)
} 
