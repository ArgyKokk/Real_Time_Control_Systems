-- Generated by TERRA CSPm2CSP version 1.0.2
-- Input file: Model.cspm

-- Channels
channel channel_Check_wr_out1_to_plant_1_rd_plant_1
channel channel_Check_wr_out_to_plant_rd_plant
channel channel_Horizontal_wr_out_to_Check_rd_horizontal
channel channel_Horizontal_wr_vertical_to_Vertical_rd_horizontal
channel channel_JoystickH_wr_joystick_h_to_Horizontal_rd_joystick
channel channel_JoystickV_wr_joystick_v_to_Vertical_rd_joystick
channel channel_Vertical_wr_out_to_Check_rd_vertical
channel channel_encoderH_writer_horizontal_to_Horizontal_rd_feedback
channel channel_encoderV_wr_eco_vertical_to_Vertical_rd_feedback

-- Processes
MainModel_PARALLEL = MainModel_PARALLELH [| {| channel_Horizontal_wr_out_to_Check_rd_horizontal , channel_Horizontal_wr_vertical_to_Vertical_rd_horizontal |} |] (MainModel_PARALLEL3 [| {| channel_Vertical_wr_out_to_Check_rd_vertical |} |] MainModel_PARALLELV)
MainModel_PARALLELH = if (true) then (MainModel_JoystickH [| {| channel_JoystickH_wr_joystick_h_to_Horizontal_rd_joystick |} |] (MainModel_Horizontal [| {| channel_encoderH_writer_horizontal_to_Horizontal_rd_feedback |} |] MainModel_encoderH) ) ; MainModel_PARALLELH else SKIP
MainModel_JoystickH = JoystickH_wr_joystick_h
JoystickH_wr_joystick_h = channel_JoystickH_wr_joystick_h_to_Horizontal_rd_joystick -> SKIP
MainModel_Horizontal = Horizontal_SEQUENTIAL
Horizontal_SEQUENTIAL = Horizontal_rd_joystick ; Horizontal_rd_feedback ; Horizontal_cpp_h ; Horizontal_wr_out ; Horizontal_wr_vertical
Horizontal_rd_joystick = channel_JoystickH_wr_joystick_h_to_Horizontal_rd_joystick -> SKIP
Horizontal_rd_feedback = channel_encoderH_writer_horizontal_to_Horizontal_rd_feedback -> SKIP
Horizontal_cpp_h = SKIP
Horizontal_wr_out = channel_Horizontal_wr_out_to_Check_rd_horizontal -> SKIP
Horizontal_wr_vertical = channel_Horizontal_wr_vertical_to_Vertical_rd_horizontal -> SKIP
MainModel_encoderH = encoderH_writer_horizontal
encoderH_writer_horizontal = channel_encoderH_writer_horizontal_to_Horizontal_rd_feedback -> SKIP
MainModel_PARALLEL3 = if (true) then (MainModel_Check [| {| channel_Check_wr_out1_to_plant_1_rd_plant_1 , channel_Check_wr_out_to_plant_rd_plant |} |] (MainModel_plant ||| MainModel_plant_1) ) ; MainModel_PARALLEL3 else SKIP
MainModel_Check = Check_SEQUENTIAL
Check_SEQUENTIAL = Check_rd_vertical ; Check_cpp_comp ; Check_wr_out1 ; Check_rd_horizontal ; Check_cpp_horiz ; Check_wr_out
Check_rd_vertical = channel_Vertical_wr_out_to_Check_rd_vertical -> SKIP
Check_cpp_comp = SKIP
Check_wr_out1 = channel_Check_wr_out1_to_plant_1_rd_plant_1 -> SKIP
Check_rd_horizontal = channel_Horizontal_wr_out_to_Check_rd_horizontal -> SKIP
Check_cpp_horiz = SKIP
Check_wr_out = channel_Check_wr_out_to_plant_rd_plant -> SKIP
MainModel_plant = plant_rd_plant
plant_rd_plant = channel_Check_wr_out_to_plant_rd_plant -> SKIP
MainModel_plant_1 = plant_1_rd_plant_1
plant_1_rd_plant_1 = channel_Check_wr_out1_to_plant_1_rd_plant_1 -> SKIP
MainModel_PARALLELV = if (true) then (MainModel_JoystickV [| {| channel_JoystickV_wr_joystick_v_to_Vertical_rd_joystick |} |] (MainModel_Vertical [| {| channel_encoderV_wr_eco_vertical_to_Vertical_rd_feedback |} |] MainModel_encoderV) ) ; MainModel_PARALLELV else SKIP
MainModel_JoystickV = JoystickV_wr_joystick_v
JoystickV_wr_joystick_v = channel_JoystickV_wr_joystick_v_to_Vertical_rd_joystick -> SKIP
MainModel_Vertical = Vertical_SEQUENTIAL
Vertical_SEQUENTIAL = Vertical_rd_feedback ; Vertical_rd_joystick ; Vertical_rd_horizontal ; Vertical_cpp_v ; Vertical_wr_out
Vertical_rd_feedback = channel_encoderV_wr_eco_vertical_to_Vertical_rd_feedback -> SKIP
Vertical_rd_joystick = channel_JoystickV_wr_joystick_v_to_Vertical_rd_joystick -> SKIP
Vertical_rd_horizontal = channel_Horizontal_wr_vertical_to_Vertical_rd_horizontal -> SKIP
Vertical_cpp_v = SKIP
Vertical_wr_out = channel_Vertical_wr_out_to_Check_rd_vertical -> SKIP
MainModel_encoderV = encoderV_wr_eco_vertical
encoderV_wr_eco_vertical = channel_encoderV_wr_eco_vertical_to_Vertical_rd_feedback -> SKIP

-- Idle process
channel idle
IDLE = idle -> IDLE

-- Assert the toplevel
assert MainModel_PARALLEL :[deadlock free [F]]
assert MainModel_PARALLEL;IDLE :[deadlock free [F]]

-- protected region user defined area on begin --
-- protected region user defined area end --
