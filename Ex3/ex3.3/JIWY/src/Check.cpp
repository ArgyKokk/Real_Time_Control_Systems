/**
 * Source file for the Check model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "Check.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace JIWY { namespace Check { 

Check::Check(ChannelOut<double> *horizontal_out, ChannelIn<double> *pwm_horizontal, ChannelIn<double> *pwm_vertical, ChannelOut<double> *vertical_out) :
    Parallel(NULL)
{
  SETNAME(this, "Check");

  // Initialize model objects
  mycpp_horizontal_check = new cpp_horizontal_check::cpp_horizontal_check(horizontal);
  SETNAME(mycpp_horizontal_check, "cpp_horizontal_check");
  mycpp_vertical = new cpp_vertical::cpp_vertical(vertical);
  SETNAME(mycpp_vertical, "cpp_vertical");
  myreader_check_horizontal = new Reader<double>(&horizontal, horizontal_out);
  SETNAME(myreader_check_horizontal, "reader_check_horizontal");
  myreader_check_vertical = new Reader<double>(&vertical, vertical_out);
  SETNAME(myreader_check_vertical, "reader_check_vertical");
  mywriter_check_horizontal = new Writer<double>(&horizontal, pwm_horizontal);
  SETNAME(mywriter_check_horizontal, "writer_check_horizontal");
  mywriter_check_vertical = new Writer<double>(&vertical, pwm_vertical);
  SETNAME(mywriter_check_vertical, "writer_check_vertical");

  // Create SEQUENTIALH group
  mySEQUENTIALH = new Sequential(
    (CSPConstruct *) myreader_check_horizontal,
    (CSPConstruct *) mycpp_horizontal_check,
    (CSPConstruct *) mywriter_check_horizontal,
    NULL
  );
  SETNAME(mySEQUENTIALH, "SEQUENTIALH");

  // Create SEQUENTIALV group
  mySEQUENTIALV = new Sequential(
    (CSPConstruct *) myreader_check_vertical,
    (CSPConstruct *) mycpp_vertical,
    (CSPConstruct *) mywriter_check_vertical,
    NULL
  );
  SETNAME(mySEQUENTIALV, "SEQUENTIALV");


  // Register model objects
  this->append_child(mySEQUENTIALH);
  this->append_child(mySEQUENTIALV);

  // protected region constructor on begin
  // protected region constructor end
}

Check::~Check()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin
  // protected region destructor end

  // Destroy model groups
  delete mySEQUENTIALH;
  delete mySEQUENTIALV;

  // Destroy model objects
  delete mywriter_check_vertical;
  delete mywriter_check_horizontal;
  delete myreader_check_vertical;
  delete myreader_check_horizontal;
  delete mycpp_vertical;
  delete mycpp_horizontal_check;
}



// protected region additional functions on begin
// protected region additional functions end

// Close namespace(s)
} } 
