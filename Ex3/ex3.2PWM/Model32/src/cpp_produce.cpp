/**
 * Source file for the cpp_produce model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "cpp_produce.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end
#include <cstdint>

namespace Model32 { namespace cpp_produce { 

cpp_produce::cpp_produce(double &outSignal) :
    CodeBlock(), outSignal(outSignal){
  SETNAME(this, "cpp_produce");

  // protected region constructor on begin
  // protected region constructor end
}

cpp_produce::~cpp_produce()
{

  // protected region destructor on begin
  // protected region destructor end
}

void cpp_produce::execute()
{
  // protected region execute code on begin
	static int value=-32768;
	this->outSignal = translation(deadzone_check(value));
	value++;
	if(value==32768)
		value=-32768;
  // protected region execute code end
}

// protected region additional functions on begin
double cpp_produce::translation(int16_t value)
{
	int16_t maxValue=32768;

	double normOut= (double) value / maxValue;
	return normOut;
}

int16_t cpp_produce::deadzone_check(int16_t value)
{
	int16_t deadzoneMax = 2200;
	uint16_t deadzoneMin = -2200;
	if(value >= deadzoneMin && value <= deadzoneMax)
	{
		printf("deadzone %d \n",value);
		return value + deadzoneMax;
	}
	else
		return value;

}
// protected region additional functions end

// Close namespace(s)


} } 
