/**
 * Source file for the Producer model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "Producer.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { namespace Producer { 

Producer::Producer(ChannelIn<int> *pr_ch1, ChannelIn<int> *pr_ch2, ChannelIn<int> *pr_ch3) :
    Sequential(NULL)
{
  SETNAME(this, "Producer");

  // Initialize model objects
  myCPP_check = new CPP_check::CPP_check(var);
  SETNAME(myCPP_check, "CPP_check");
  myCPP_pr = new CPP_pr::CPP_pr(var);
  SETNAME(myCPP_pr, "CPP_pr");
  mywriter1 = new Writer<int>(&var, pr_ch1);
  SETNAME(mywriter1, "writer1");
  mywriter2 = new Writer<int>(&var, pr_ch2);
  SETNAME(mywriter2, "writer2");
  mywriter3 = new Writer<int>(&var, pr_ch3);
  SETNAME(mywriter3, "writer3");

  // Set conditions for the guarded objects that are not in a Sequential group
  AltIfOption<int>* mywriter1_guard = new AltIfOption<int>(mywriter1, std::bind(&Producer::writer1GuardEvaluate, this));
  SETNAME(mywriter1_guard, "writer1-guard");
  AltIfOption<int>* mywriter2_guard = new AltIfOption<int>(mywriter2, std::bind(&Producer::writer2GuardEvaluate, this));
  SETNAME(mywriter2_guard, "writer2-guard");
  AltIfOption<int>* mywriter3_guard = new AltIfOption<int>(mywriter3, std::bind(&Producer::writer3GuardEvaluate, this));
  SETNAME(mywriter3_guard, "writer3-guard");
  // Create ALTERNATIVE group
  myALTERNATIVE = new Alternative(
    true,
    (CSPConstruct *) mywriter1_guard,
    (CSPConstruct *) mywriter2_guard,
    (CSPConstruct *) mywriter3_guard,
    NULL
  );
  SETNAME(myALTERNATIVE, "ALTERNATIVE");


  // Register model objects
  this->append_child(myCPP_pr);
  this->append_child(myCPP_check);
  this->append_child(myALTERNATIVE);

  // protected region constructor on begin

  // protected region constructor end
}

Producer::~Producer()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin

  // protected region destructor end

  // Destroy model groups
  delete myALTERNATIVE;

  // Destroy model objects
  delete mywriter3;
  delete mywriter2;
  delete mywriter1;
  delete myCPP_pr;
  delete myCPP_check;
}


bool Producer::writer1GuardEvaluate()
{
  return var < 10;
}

bool Producer::writer2GuardEvaluate()
{
  return var== 20;
}

bool Producer::writer3GuardEvaluate()
{
  return var > 20;
}

// protected region additional functions on begin

// protected region additional functions end

// Close namespace(s)
} } 
